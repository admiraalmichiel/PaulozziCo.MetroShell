<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    mc:Ignorable="d"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
    xmlns:sdk="http://schemas.microsoft.com/winfx/2006/xaml/presentation/sdk" 
    xmlns:System="clr-namespace:System;assembly=mscorlib" 
    xmlns:converters="clr-namespace:PaulozziCo.MetroShell.Presentation.Converters"
    xmlns:s="clr-namespace:Microsoft.LightSwitch.Runtime.Shell.Implementation.Standard;assembly=Microsoft.LightSwitch.Client.Internal"
    xmlns:primitives="clr-namespace:System.Windows.Controls.Primitives;assembly=System.Windows.Controls" 
    xmlns:framework="clr-namespace:Microsoft.LightSwitch.Presentation.Framework;assembly=Microsoft.LightSwitch.Client"
    xmlns:fxconv="clr-namespace:Microsoft.LightSwitch.Presentation.Framework.Converters.Internal;assembly=Microsoft.LightSwitch.Client"
    xmlns:ctl="clr-namespace:Microsoft.LightSwitch.Presentation.Implementation.Controls;assembly=Microsoft.LightSwitch.Client.Internal"
    xmlns:style="clr-namespace:Microsoft.LightSwitch.Presentation.Framework.Helpers;assembly=Microsoft.LightSwitch.Client"
    xmlns:fm="clr-namespace:Microsoft.LightSwitch.Presentation.Framework;assembly=Microsoft.LightSwitch.Client"
    xmlns:slu="clr-namespace:Microsoft.LightSwitch.SilverlightUtilities.Controls.Internal;assembly=Microsoft.LightSwitch.Client"
    xmlns:internalconverters="clr-namespace:Microsoft.LightSwitch.Presentation.Framework.Converters.Internal;assembly=Microsoft.LightSwitch.Client"    
    xmlns:internalControls="clr-namespace:Microsoft.LightSwitch.SilverlightUtilities.Controls.Internal;assembly=Microsoft.LightSwitch.Client"
    xmlns:internalToolkit="clr-namespace:Microsoft.LightSwitch.Presentation.Framework.Toolkit.Internal;assembly=Microsoft.LightSwitch.Client"
    xmlns:utils="clr-namespace:Microsoft.LightSwitch.Presentation.Utilities.Internal;assembly=Microsoft.LightSwitch.Client">

    <!-- The following styles define the look and feel for most buttons used in LightSwitch, excluding the Ribbon. -->
  
    <!-- Used to convert disabled button icons to 'grayed out' and semi-transparent -->
    <internalconverters:GrayscaleImageConverter x:Key="GrayscaleConverter"/>
    <slu:ValueNullVisibilityConverter x:Key="ValueNullVisibilityConverter"/>
    <slu:BooleanToVisibleConverter x:Key="BoolToVisibleConverter"/>
    <converters:TextToLowerConverter x:Key="ToLowerConverter"/>
    
    <!-- Used to convert the built-in icons for the list and grid (Add, Delete, etc) -->
	<converters:ContentItemToIconConverter x:Key="IconConverter"/>
    <!--<converters:DefaultCollectionIconConverter x:Key="IconConverter"/>-->
    
    <converters:TextToUpperConverter x:Key="ToUpperConverter"/>    
    
    <!-- Common border used by all button styles -->
    <SolidColorBrush x:Key="ButtonBorderBrush" Color="Transparent"/>

    <!-- This is the base style used for all buttons.  -->
    <Style x:Key="ButtonBaseStyle" TargetType="ButtonBase">
        <Setter Property="Background" Value="#FF1F3B53"/>
        <Setter Property="Foreground" Value="#FF000000"/>
        <Setter Property="Padding" Value="3"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="BorderBrush">
            <Setter.Value>
                <SolidColorBrush Color="Transparent"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid x:Name="grid" RenderTransformOrigin="0.5,0.5">
                    	<Grid.Projection>
                    		<PlaneProjection RotationX="0" RotationY="0" RotationZ="0"/>
                    	</Grid.Projection>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.2"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                		<DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="BackgroundHover" d:IsOptimized="True"/>
                                		<DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="textBlock" d:IsOptimized="True"/>
                                		<DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="contentPresenter" d:IsOptimized="True"/>
                                		<DoubleAnimation Duration="0" To="0" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="LightingPressed" d:IsOptimized="True"/>
                                	</Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                		<DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="BackgroundHover" d:IsOptimized="True"/>
                                		<DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="contentPresenter" d:IsOptimized="True"/>
                                		<DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="textBlock" d:IsOptimized="True"/>
                                		<DoubleAnimation Duration="0" To="0" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="Lighting" d:IsOptimized="True"/>
                                		<DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="LightingPressed" d:IsOptimized="True"/>
                                        <DoubleAnimation Duration="0" To="25" Storyboard.TargetProperty="(UIElement.Projection).(PlaneProjection.RotationY)" Storyboard.TargetName="grid" d:IsOptimized="True"/>
                                	</Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="0.3" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="grid" d:IsOptimized="True"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.2"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="BackgroundHover" d:IsOptimized="True"/>
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="textBlock" d:IsOptimized="True"/>
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="contentPresenter" d:IsOptimized="True"/>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unfocused"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border x:Name="Background" Background="{StaticResource ButtonBackgroundBrush}" CornerRadius="0"/>
                        <Border x:Name="BackgroundHover" Background="{StaticResource ButtonBackgroundMouseOverBrush}" Opacity="0" CornerRadius="0"/>
                        <Border x:Name="Lighting" Background="{StaticResource ButtonBackgroundOverlayEffectBrush}" CornerRadius="0"/>
                        <Border x:Name="LightingPressed" Background="{StaticResource ButtonBorderFocusedBrush}" Opacity="0" CornerRadius="0"/>
                        <Border x:Name="DarkBevelOutline" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{StaticResource ButtonBorderBrush}" CornerRadius="0"/>
                        <!-- Because some button content is textual and some is not (i.e., the Image control's upload/delete buttons) this template
                             includes a textblock and content presenter for the button content.  -->
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        <TextBlock x:Name="textBlock" TextWrapping="Wrap" Text="{TemplateBinding Content}" d:LayoutOverrides="Width, Height" HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="{StaticResource ButtonForegroundBrush}" Opacity="0"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- This is the implicit style for all buttons
    -->

    <Style TargetType="Button" BasedOn="{StaticResource ButtonBaseStyle}"/>

    <Style x:Key="ButtonStyle" TargetType="Button" BasedOn="{StaticResource ButtonBaseStyle}"/>

    <!-- Buttons in dialogs will use this style.  The sizing properties are based on Windows guidelines -->
    <Style x:Key="MinSizeButtonStyle" TargetType="Button" BasedOn="{StaticResource ButtonBaseStyle}">
        <Setter Property="Margin" Value="3"/>
        <Setter Property="MinHeight" Value="23"/>
        <Setter Property="MinWidth" Value="75"/>
    </Style>

    <!-- Toggle buttons are used inside many controls in the shell. -->
    <Style x:Key="MainToggleButtonStyle" TargetType="ToggleButton">
        <Setter Property="Background" Value="#FF1F3B53"/>
        <Setter Property="Foreground" Value="#FF000000"/>
        <Setter Property="Padding" Value="3"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="#8F897F"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                		<DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="BackgroundHover" d:IsOptimized="True"/>
                                	</Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                		<DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="BackgroundHover" d:IsOptimized="True"/>
                                		<DoubleAnimation Duration="0" To="0" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="Lighting" d:IsOptimized="True"/>
                                		<DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="LightingHover" d:IsOptimized="True"/>
                                	</Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                	<Storyboard>
                                		<DoubleAnimation Duration="0" To="0.395" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="contentPresenter" d:IsOptimized="True"/>
                                	</Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CheckStates">
                            	<VisualState x:Name="Checked">
                            		<Storyboard>
                            			<DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="BackgroundChecked" d:IsOptimized="True"/>
                            			<DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="LightingChecked" d:IsOptimized="True"/>
                            			<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="Lighting">
                            				<DiscreteObjectKeyFrame KeyTime="0">
                            					<DiscreteObjectKeyFrame.Value>
                            						<Visibility>Collapsed</Visibility>
                            					</DiscreteObjectKeyFrame.Value>
                            				</DiscreteObjectKeyFrame>
                            			</ObjectAnimationUsingKeyFrames>
                            			<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="contentPresenter">
                            				<DiscreteObjectKeyFrame KeyTime="0">
                            					<DiscreteObjectKeyFrame.Value>
                            						<Visibility>Visible</Visibility>
                            					</DiscreteObjectKeyFrame.Value>
                            				</DiscreteObjectKeyFrame>
                            			</ObjectAnimationUsingKeyFrames>
                            		</Storyboard>
                            	</VisualState>
                            	<VisualState x:Name="Unchecked"/>
                            	<VisualState x:Name="Indeterminate"/>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                		<DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="BackgroundFocused" d:IsOptimized="True"/>
                                		<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="contentPresenter">
                                			<DiscreteObjectKeyFrame KeyTime="0">
                                				<DiscreteObjectKeyFrame.Value>
                                					<Visibility>Visible</Visibility>
                                				</DiscreteObjectKeyFrame.Value>
                                			</DiscreteObjectKeyFrame>
                                		</ObjectAnimationUsingKeyFrames>
                                	</Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unfocused"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border x:Name="Background" BorderThickness="{TemplateBinding BorderThickness}" Background="White" BorderBrush="White" CornerRadius="0"/>
                        <Border x:Name="BackgroundHover" BorderThickness="{TemplateBinding BorderThickness}" Background="#FFDEDEDE" BorderBrush="#FFDEDEDE" Opacity="0" CornerRadius="0"/>
                        <Border x:Name="BackgroundFocused" BorderThickness="{TemplateBinding BorderThickness}" Background="#FFDEDEDE" BorderBrush="#FFDEDEDE" Opacity="0" CornerRadius="0"/>
                        <Border x:Name="BackgroundChecked" BorderThickness="{TemplateBinding BorderThickness}" Background="#FFDEDEDE" BorderBrush="#FFDEDEDE" Opacity="0" CornerRadius="0"/>
                        <Border x:Name="Lighting">
                            <Border.Background>
                                <SolidColorBrush Color="#19000000" />
                            </Border.Background>
                        </Border>
                        <Border x:Name="LightingHover" Opacity="0">
                            <Border.Background>
                                <SolidColorBrush Color="#19000000" />
                            </Border.Background>
                        </Border>
                        <Border x:Name="LightingChecked" Opacity="0">
                            <Border.Background>
                                <SolidColorBrush Color="#19000000" />
                            </Border.Background>
                        </Border>
                        <Border x:Name="LightBevelOutline" BorderBrush="#33FFFFFF" BorderThickness="1" Margin="1" CornerRadius="0"/>
                        <Border x:Name="DarkBevelOutline" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="#19000000" CornerRadius="0"/>
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="ToggleButton" BasedOn="{StaticResource MainToggleButtonStyle}"/>


    <!-- The button used by some dropdowns, such as Phone# and Concurrency resolution -->
    <Style x:Key="PopupToggleButtonStyle" TargetType="ToggleButton" BasedOn="{StaticResource MainToggleButtonStyle}">
        <Setter Property="BorderBrush" Value="{StaticResource TextBoxBorderBrush}"/>
        <Setter Property="MinHeight" Value="21" />
        <Setter Property="Width" Value="21" />
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <!-- Combobox style Arrow -->
                    <Viewbox Width="8" Height="8">
                        <Path x:Name="BtnArrow" VerticalAlignment="Center" HorizontalAlignment="Center" Stroke="#FF8F897F" StrokeThickness="1"
                            Data="M 1.32501220703125,0.225006103515625 C1.0350341796875,-0.06494140625 0.56494140625,-0.06494140625 0.2750244140625,0.225006103515625 -0.01495361328125,0.51495361328125 -0.01495361328125,0.98504638671875 0.2750244140625,1.274993896484375 0.2750244140625,1.274993896484375 4.4749755859375,5.475006103515625 4.4749755859375,5.475006103515625 4.76495361328125,5.76495361328125 5.23504638671875,5.76495361328125 5.5250244140625,5.475006103515625 5.5250244140625,5.475006103515625 9.7249755859375,1.274993896484375 9.7249755859375,1.274993896484375 10.01495361328125,0.98504638671875 10.01495361328125,0.51495361328125 9.7249755859375,0.225006103515625 9.43505859375,-0.06494140625 8.9649658203125,-0.06494140625 8.67498779296875,0.225006103515625 8.67498779296875,0.225006103515625 5,3.899993896484375 5,3.899993896484375 5,3.899993896484375 1.32501220703125,0.225006103515625 1.32501220703125,0.225006103515625 z" UseLayoutRounding="False" Fill="#FF8F897F" />
                    </Viewbox>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- Buttons that appear over ToolbarBackgroundBrush in toolbar area. -->
    <Style x:Name="ToolbarButtonStyle" TargetType="ButtonBase" BasedOn="{StaticResource ButtonStyle}" >
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ButtonBase">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                        <VisualStateGroup>
                            <VisualState x:Name="MouseOver">
                            <Storyboard>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="contentPresenter" Storyboard.TargetProperty="Foreground" d:IsOptimized="True">
                                    <DiscreteObjectKeyFrame Value="White" KeyTime="0"/>
                                </ObjectAnimationUsingKeyFrames>
                                <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="BackgroundHover" d:IsOptimized="True"/>
                                <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="LightingHover" d:IsOptimized="True"/>
                                <DoubleAnimation Duration="0" To="0" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="LightingPressed" d:IsOptimized="True"/>
                            </Storyboard>
                        </VisualState>
                        <VisualState x:Name="Pressed">
                            <Storyboard>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="contentPresenter" Storyboard.TargetProperty="Foreground"  d:IsOptimized="True">
                                    <DiscreteObjectKeyFrame Value="White" KeyTime="0"/>
                                </ObjectAnimationUsingKeyFrames >
                                <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="BackgroundHover" d:IsOptimized="True"/>
                                <DoubleAnimation Duration="0" To="0" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="Lighting" d:IsOptimized="True"/>
                                <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="LightingPressed" d:IsOptimized="True"/>
                                <DoubleAnimation Duration="0" To="0" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="LightingHover" d:IsOptimized="True"/>
                            </Storyboard>
                        </VisualState>
                        <VisualState x:Name="Disabled">
                            <Storyboard>
                                <DoubleAnimation Duration="0" To="0.3" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="grid" d:IsOptimized="True"/>
                            </Storyboard>
                        </VisualState>
                        </VisualStateGroup>
                        <VisualStateGroup x:Name="FocusStates">
                            <VisualStateGroup.Transitions>
                                <VisualTransition GeneratedDuration="0:0:0.2"/>
                            </VisualStateGroup.Transitions>
                            <VisualState x:Name="Focused">
                                <Storyboard>
                                    <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="BackgroundHover" d:IsOptimized="True"/>
                                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="contentPresenter" Storyboard.TargetProperty="Foreground">
                                        <DiscreteObjectKeyFrame Value="White" KeyTime="0"/>
                                    </ObjectAnimationUsingKeyFrames>
                                </Storyboard>
                            </VisualState>
                            <VisualState x:Name="Unfocused"/>
                        </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border x:Name="Background" Background="{TemplateBinding Background}" CornerRadius="0"/>
                        <Border x:Name="BackgroundHover" Background="{StaticResource ButtonBackgroundMouseOverBrush}" CornerRadius="0" Opacity="0"/>
                        <Border x:Name="LightBevelOutline" CornerRadius="0" BorderBrush="#33FFFFFF" BorderThickness="1" Margin="1"/>
                        <Border x:Name="DarkBevelOutline" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="0" BorderBrush="{StaticResource ButtonBorderBrush}"/>

                        <Border x:Name="Lighting" CornerRadius="0">
                            <Border.Background>
                                <LinearGradientBrush EndPoint="0.5,0" StartPoint="0.5,1">
                                    <GradientStop Color="#19000000" Offset="0"/>
                                    <GradientStop Color="#19FFFFFF" Offset="1"/>
                                </LinearGradientBrush>
                            </Border.Background>
                        </Border>
                        <Border x:Name="LightingHover" CornerRadius="0" Opacity="0">
                            <Border.Background>
                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                    <GradientStop Color="#19000000" Offset="0"/>
                                    <GradientStop Color="#19FFFFFF" Offset="1"/>
                                </LinearGradientBrush>
                            </Border.Background>
                        </Border>
                        <Border x:Name="LightingPressed" CornerRadius="0" Opacity="0">
                            <Border.Background>
                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                    <GradientStop Color="#19000000" Offset="0"/>
                                    <GradientStop Color="#19FFFFFF" Offset="1"/>
                                </LinearGradientBrush>
                            </Border.Background>
                        </Border>
                        <Border x:Name="FocusedBorder"
                                   BorderBrush="{StaticResource ButtonBorderBrush}"
                                   BorderThickness="1"
                                   Opacity="0"
                                   CornerRadius="0"/>

                        <ContentControl x:Name="contentPresenter" 
                                        IsTabStop="False"
                                        Foreground="{TemplateBinding Foreground}"
                                        Content="{TemplateBinding Content}"
                                        Margin="{TemplateBinding Padding}"
                                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                        VerticalAlignment="Center">
                       </ContentControl>
                        
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Style of buttons used in the list/grid command toolbar.  Most of the button's visual appearance is defined in the
         CollectionButtonVisualStyle (below) -->
    <Style x:Key="CollectionButtonStyle" TargetType="Button" BasedOn="{StaticResource ToolbarButtonStyle}">
        <Setter Property="MinHeight" Value="32"/>
        <Setter Property="MinWidth" Value="32"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                   <ContentControl x:Name="contentPresenter" 
                                        IsTabStop="False"
                                        Foreground="{TemplateBinding Foreground}"
                                        Content="{TemplateBinding Content}"
                                        Margin="{TemplateBinding Padding}"
                                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                        VerticalAlignment="Center"/>
            
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    
    <!-- This style defines the template for buttons in the list/grid toolbar.  The template is somewhat complicated to allow
         the default icons to be replaced.  -->
    <Style x:Key="CollectionButtonVisualStyle" TargetType="ctl:CollectionButtonVisual">
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ctl:CollectionButtonVisual">  
                    <Grid x:Name="InvisibleGrid">
                        <!-- This hidden control is used for data binding purposes.  The button template will bind to this to 
                             determine whether or not an icon exists for the command. -->
                        <Image x:Name="ButtonIconPlaceHolder" Visibility="Collapsed"
                               Source="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ButtonImage}"/>
                        <Button x:Name="ButtonElement" BorderThickness="0"
                                AutomationProperties.AutomationId="{Binding DisplayName, StringFormat=Control:\{0\}}"
                                AutomationProperties.Name="{Binding DisplayName}"
                                AutomationProperties.HelpText="{Binding Description}"
                                Style="{x:Null}"
                                ToolTipService.ToolTip="{Binding Description}"
                                Command="{TemplateBinding Command}"
                                MinWidth="9" MinHeight="9">
                            <Button.Template>
                                <ControlTemplate>
                                    <Grid>
                                        <VisualStateManager.VisualStateGroups>
                                            <VisualStateGroup x:Name="CommonStates">
                                            <VisualState x:Name="Normal"/>
                                            <VisualState x:Name="MouseOver">
                                                <Storyboard>
                                                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="NormalIcon" Storyboard.TargetProperty="Visibility" Duration="0">
                                                        <DiscreteObjectKeyFrame KeyTime="0" Value="Collapsed"/>
                                                    </ObjectAnimationUsingKeyFrames>
                                                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="MouseOverIcon" Storyboard.TargetProperty="Visibility" Duration="0">
                                                        <DiscreteObjectKeyFrame KeyTime="0" Value="Visible"/>
                                                    </ObjectAnimationUsingKeyFrames>
                                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ButtonText" Storyboard.TargetProperty="Foreground">
                                                            <DiscreteObjectKeyFrame Value="{StaticResource ToolbarButtonTextMouseOverBrush}" KeyTime="0"/>
                                                        </ObjectAnimationUsingKeyFrames>
                                                    </Storyboard>
                                            </VisualState>
                                            <VisualState x:Name="Pressed">
                                                <Storyboard>
                                                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="NormalIcon" Storyboard.TargetProperty="Visibility" Duration="0">
                                                        <DiscreteObjectKeyFrame KeyTime="0" Value="Collapsed"/>
                                                    </ObjectAnimationUsingKeyFrames>
                                                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="MouseOverIcon" Storyboard.TargetProperty="Visibility" Duration="0">
                                                        <DiscreteObjectKeyFrame KeyTime="0" Value="Visible"/>
                                                    </ObjectAnimationUsingKeyFrames>
                                                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ButtonText" Storyboard.TargetProperty="Foreground">
                                                            <DiscreteObjectKeyFrame Value="{StaticResource ToolbarButtonTextMouseOverBrush}" KeyTime="0"/>
                                                    </ObjectAnimationUsingKeyFrames>
                                                    </Storyboard>
                                            </VisualState>
                                            <VisualState x:Name="Disabled">
                                                <Storyboard>
                                                </Storyboard>
                                            </VisualState>
                                        </VisualStateGroup>
                                        </VisualStateManager.VisualStateGroups>
                                        <!-- Button text that is used if the command does not have an icon. -->                                       
                                        <TextBlock Text="{Binding DisplayName}" x:Name="ButtonText"
                                                   Visibility="{Binding ElementName=ButtonIconPlaceHolder, Path=Source, 
                                                   Converter={StaticResource ValueNullVisibilityConverter}, ConverterParameter='true'}"/>
                                        <!-- Visual element used to display the command icon, if any.  The grid
                                             is hidden if there is no icon. -->
                                        <Grid x:Name="DefaultImageView" 
                                              Visibility="{Binding ElementName=ButtonIconPlaceHolder, Path=Source, 
                                                                   Converter={StaticResource ValueNullVisibilityConverter}}">
                                            <Image Height="16" Width="16" x:Name="NormalIcon"
                                                   Source="{Binding Converter={StaticResource IconConverter}, ConverterParameter=Normal}"
                                                   Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, 
                                                                Path=IsEnabled,
                                                                Converter={StaticResource BoolToVisibleConverter}}"/>
                                            <Image Height="16" Width="16" x:Name="MouseOverIcon"
                                                   Source="{Binding Converter={StaticResource IconConverter}, ConverterParameter=MouseOver}"
                                                   Visibility="Collapsed"/>

                                            <Image Height="16" Width="16" x:Name="DisabledIcon"
                                                   Source="{Binding RelativeSource={RelativeSource TemplatedParent}, 
                                                                 Converter={StaticResource IconConverter},
                                                                 ConverterParameter='disabled'}"
                                                   Visibility="{Binding RelativeSource={RelativeSource TemplatedParent},
                                                             Path=IsEnabled,
                                                             Converter={StaticResource BoolToVisibleConverter},
                                                             ConverterParameter='true'}"/>
                                        </Grid>
                                    </Grid>
                                </ControlTemplate>
                            </Button.Template>
                        </Button>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- The colleciton toolbar uses implicit styles to apply the style -->
    <Style TargetType="ctl:CollectionButtonVisual" BasedOn="{StaticResource CollectionButtonVisualStyle}"/>


    <!-- The style that defines the 'Header' for a group in the shell's navigation menu-->
    <Style x:Key="NavigationHeaderButtonStyle" TargetType="ButtonBase">
        <Setter Property="Foreground" Value="{StaticResource NavGroupTextBrush}"/>
        <Setter Property="BorderThickness" Value="0,1,0,0"/>
        <Setter Property="MinHeight" Value="30"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ButtonBase">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <!-- This control handles the MouseOver/Pressed states, the TreeViewItem 
                                 handles the focused/selected states.-->
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ActiveBorder" Storyboard.TargetProperty="BorderBrush">
                                            <DiscreteObjectKeyFrame Value="{StaticResource NavGroupBorderMouseOverBrush}" KeyTime="0"/>
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ActiveBorder" Storyboard.TargetProperty="Background">
                                            <DiscreteObjectKeyFrame Value="{StaticResource NavGroupBackgroundMouseOverBrush}" KeyTime="0"/>
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="contentPresenter" Storyboard.TargetProperty="Foreground">
                                            <DiscreteObjectKeyFrame Value="{StaticResource NavGroupTextMouseOverBrush}" KeyTime="0"/>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ActiveBorder" Storyboard.TargetProperty="BorderBrush">
                                            <DiscreteObjectKeyFrame Value="{StaticResource NavGroupBorderMouseOverBrush}" KeyTime="0"/>
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ActiveBorder" Storyboard.TargetProperty="Background">
                                            <DiscreteObjectKeyFrame Value="{StaticResource NavGroupBackgroundMouseOverBrush}" KeyTime="0"/>
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="contentPresenter" Storyboard.TargetProperty="Foreground">
                                            <DiscreteObjectKeyFrame Value="{StaticResource NavGroupTextMouseOverBrush}" KeyTime="0"/>
                                        </ObjectAnimationUsingKeyFrames>
                                        <DoubleAnimation Duration="0" To="20" Storyboard.TargetProperty="(UIElement.Projection).(PlaneProjection.RotationY)" Storyboard.TargetName="PaddingBorder" d:IsOptimized="True"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>


                        <!-- Just display the normal border/background, everything else
                             is on top of this -->
                        <Border x:Name="NormalBorder" 
                                Margin="{TemplateBinding Margin}"
                                Background="{StaticResource NavGroupBackgroundBrush}"
                                BorderBrush="{StaticResource NavGroupBorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                HorizontalAlignment="Stretch" 
                                VerticalAlignment="Stretch" 
                                CornerRadius="0"/>

                        <!-- The focus colors are handled by the TreeViewItem, and are
                             set by changing these colors from Transparent to the expected values -->
                        <Border x:Name="FocusBorder" 
                                Margin="{TemplateBinding Margin}"
                                Background="{TemplateBinding Background}" 
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="1"
                                HorizontalAlignment="Stretch" 
                                VerticalAlignment="Stretch" 
                                CornerRadius="0"/>

                        <!-- Layer for MouseOver/Pressed -->
                        <Border x:Name="ActiveBorder" 
                                Margin="{TemplateBinding Margin}"
                                Background="Transparent" 
                                BorderBrush="Transparent"
                                BorderThickness="1"
                                HorizontalAlignment="Stretch" 
                                VerticalAlignment="Stretch" 
                                CornerRadius="0"/>

                        <Border x:Name="PaddingBorder"
                                BorderBrush="Transparent" 
                                Margin="{TemplateBinding Margin}"
                                BorderThickness="1">
                            <Border.Projection>
                                <PlaneProjection RotationX="0" RotationY="0" RotationZ="0"/>
                            </Border.Projection>
                            <ContentControl 
                                x:Name="contentPresenter"
                                IsTabStop="False"
                                FontSize="14"
                                FontFamily="/PaulozziCo.MetroShell.Client;component/Fonts/segoeui.ttf#Segoe UI"
                                Foreground="{TemplateBinding Foreground}"
                                Margin="{TemplateBinding Padding}"
                                Padding="12,0,0,0"
                                HorizontalContentAlignment="Left"
                                VerticalContentAlignment="Center"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Content="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=DataContext.DisplayName}" 
                                ContentTemplate="{TemplateBinding ContentTemplate}"/> <!--Converter={StaticResource ToLowerConverter}-->
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- This is style is used for the screen links that appear on the left side of the application in the default shell -->
    <Style x:Key="NavigationLinkButtonStyle" TargetType="ButtonBase">
        <Setter Property="Foreground" Value="{StaticResource NavItemTextBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource NavItemBorderBrush}"/>
        <Setter Property="Background" Value="{StaticResource NavItemBackgroundBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ButtonBase">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="FocusedBorder" Storyboard.TargetProperty="Opacity" To="1" Duration="0"/>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unfocused"/>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ActiveBorder" Storyboard.TargetProperty="Background">
                                            <DiscreteObjectKeyFrame Value="{StaticResource NavItemBackgroundMouseOverBrush}" KeyTime="0"/>
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ActiveBorder" Storyboard.TargetProperty="BorderBrush">
                                            <DiscreteObjectKeyFrame Value="{StaticResource NavItemBorderMouseOverBrush}" KeyTime="0"/>
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="contentPresenter" Storyboard.TargetProperty="Foreground">
                                            <DiscreteObjectKeyFrame Value="{StaticResource NavItemTextMouseOverBrush}" KeyTime="0"/>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ActiveBorder" Storyboard.TargetProperty="Background">
                                            <DiscreteObjectKeyFrame Value="{StaticResource NavItemBackgroundPressedBrush}" KeyTime="0"/>
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ActiveBorder" Storyboard.TargetProperty="BorderBrush">
                                            <DiscreteObjectKeyFrame Value="{StaticResource NavItemBorderPressedBrush}" KeyTime="0"/>
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="contentPresenter" Storyboard.TargetProperty="Foreground">
                                            <DiscreteObjectKeyFrame Value="{StaticResource NavItemTextPressedBrush}" KeyTime="0"/>
                                        </ObjectAnimationUsingKeyFrames>
                                        <!--Incliso-->
                                        <DoubleAnimation Duration="0" To="20" Storyboard.TargetProperty="(UIElement.Projection).(PlaneProjection.RotationY)" Storyboard.TargetName="NormalBorderContent" d:IsOptimized="True"/>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="contentPresenter" Storyboard.TargetProperty="Opacity" To=".5" Duration="0"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>

                        <!-- Just display the normal border/background, everything else
                             is on top of this -->
                        <Border x:Name="NormalBorder"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                                CornerRadius="1" />

                        <!-- Border displayed when this button has focus -->
                        <Border x:Name="FocusedBorder"
                                Background="{StaticResource NavItemBackgroundFocusedBrush}"
                                BorderBrush="{StaticResource NavItemBorderFocusedBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Opacity="0"
                                CornerRadius="1"/>

                        <!-- Overlay for MouseOver/Pressed colors -->
                        <Border x:Name="ActiveBorder"
                                Background="Transparent"
                                BorderBrush="Transparent"
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                                CornerRadius="1" />

                        <Border BorderBrush="Transparent" x:Name="NormalBorderContent" BorderThickness="{TemplateBinding BorderThickness}">
                            <Border.Projection>
                                <PlaneProjection RotationX="0" RotationY="0" RotationZ="0"/>
                            </Border.Projection>
                            <ContentControl
                                x:Name="contentPresenter" 
                                IsTabStop="False"
                                FontSize="12"
                                FontFamily="/PaulozziCo.MetroShell.Client;component/Fonts/segoeui.ttf#Segoe UI"
                                Padding="10,2,10,2"
                                Foreground="{TemplateBinding Foreground}"
                                Margin="{TemplateBinding Padding}"
                                HorizontalContentAlignment="Stretch"
                                VerticalContentAlignment="Stretch"                                
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                VerticalAlignment="Center"
                                Content="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=DataContext.DisplayName}"
                                ContentTemplate="{TemplateBinding ContentTemplate}"/>
                            <!--Converter={StaticResource ToUpperConverter}  Margin="{TemplateBinding Padding}"-->
                        </Border>

                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
